using LinearAlgebra
using Distributions
using StatsBase
using Plots

# Predefined Length
# The number printed at the end is the p-value of rejecting that the sample was
# generated by the MLE of p (which is number_of_up/total)

pathlength = 1000
prob = 0.7

jumps = sample([-1, 1], pweights([1-prob, prob]), pathlength)
path = cumsum(jumps)
counts = let
    c = addcounts!(Dict(-1 => 0, 1 => 0), jumps)
    [c[-1], c[1]]
end

n=length(path) # Number of trials
p=counts[2]/n # What you think value of p is

dist = Binomial(n, p)
threshold = pdf(dist, round(n*p))
I = [pdf(dist, i) for i in 1:n if pdf(dist, i) < threshold]
sum(I)

# Streaming version
pvalues = Float64[]
for t in 1:15
    jumps_t = jumps[1:t]
    path_t = cumsum(jumps_t)
    counts_t = let
        c = addcounts!(Dict(-1 => 0, 1 => 0), jumps_t)
        [c[-1], c[1]]
    end

    n=length(path_t) # Number of trials
    p=counts_t[2]/n # What you think value of p is
    dist = Binomial(n, p)
    threshold = pdf(dist, round(n*p))
    I = [pdf(dist, i) for i in 1:n if pdf(dist, i) < threshold]
    push!(pvalues, sum(I))
end

plot(pvalues, labels = "p-value", legend = :bottomright)

# Single changepoint
pathlength = 1000
prob1 = rand()
prob2 = rand()
changepoint = rand(1:1000)
jumps1 = sample([-1, 1], pweights([1-prob1, prob1]), changepoint)
jumps2 = sample([-1, 1], pweights([1-prob2, prob2]), 1000-changepoint)                             
jumps = vcat(jumps1, jumps2)
path = cumsum(jumps)
counts = let
    c = addcounts!(Dict(-1 => 0, 1 => 0), jumps)
    [c[-1], c[1]]
end

plot(path, labels="path", xlabel = "Step", ylabel = "Value")

# Streaming version
pvalues = Float64[]
probs = Float64[]
for t in 5:1000
    jumps_t = jumps[1:t]
    path_t = cumsum(jumps_t)
    counts_t = let
        c = addcounts!(Dict(-1 => 0, 1 => 0), jumps_t)
        [c[-1], c[1]]
    end
    
    n=length(path_t) # Number of trials
    p=counts_t[2]/n # What you think value of p is
    push!(probs, p)

    dist = Binomial(n, p)
    threshold = pdf(dist, round(n*p))
    I = [pdf(dist, i) for i in 1:n if pdf(dist, i) < threshold]
    push!(pvalues, sum(I))
end

plot(probs, legend = :topleft)
